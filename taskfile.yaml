version: "3"

vars:
  GO_VERSION: "1.25"
  GOLANGCI_LINT_VERSION: "v2.5.0"
  GCI_VERSION: "v0.13.7"
  GOFUMPT_VERSION: "v0.9.1"
  BUF_VERSION: "1.53.0"
  PROTOC_GEN_GO_VERSION: "v1.36.6"
  PROTOC_GEN_GO_GRPC_VERSION: "v1.5.1"
  PROTOC_GEN_VALIDATE_VERSION: "v1.2.1"
  MOCKERY_VERSION: "v2.53.3"

  BIN_DIR: "{{.ROOT_DIR}}/bin"
  COVERAGE_DIR: "{{.ROOT_DIR}}/coverage"
  GOLANGCI_LINT: "{{.BIN_DIR}}/golangci-lint"
  GCI: "{{.BIN_DIR}}/gci"
  GOFUMPT: "{{.BIN_DIR}}/gofumpt"
  BUF: "{{.BIN_DIR}}/buf"
  PROTOC_GEN_GO: "{{.BIN_DIR}}/protoc-gen-go"
  PROTOC_GEN_GO_GRPC: "{{.BIN_DIR}}/protoc-gen-go-grpc"
  PROTOC_GEN_VALIDATE: "{{.BIN_DIR}}/protoc-gen-validate"
  PROJECT_PREFIX: "github.com/gomeal"
  MOCKERY: "{{.BIN_DIR}}/mockery"

tasks:
  # Установка инструментов
  install-tools:
    desc: "Устанавливает все необходимые инструменты"
    cmds:
      - task: install-formatters
      - task: install-linter
      - task: install-proto-tools
      - task: install-mockery
    status:
      - test -x {{.GOFUMPT}}
      - test -x {{.GCI}}
      - test -x {{.GOLANGCI_LINT}}
      - test -x {{.BUF}}
      - test -x {{.PROTOC_GEN_GO}}
      - test -x {{.PROTOC_GEN_GO_GRPC}}
      - test -x {{.PROTOC_GEN_VALIDATE}}
      - test -x {{.MOCKERY}}

  install-formatters:
    desc: "Устанавливает форматтеры gci и gofumpt"
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - |
        if [ ! -f {{.GOFUMPT}} ]; then
          echo "Installing gofumpt..."
          GOBIN={{.BIN_DIR}} go install mvdan.cc/gofumpt@{{.GOFUMPT_VERSION}}
        fi
      - |
        if [ ! -f {{.GCI}} ]; then
          echo "Installing gci..."
          GOBIN={{.BIN_DIR}} go install github.com/daixiang0/gci@{{.GCI_VERSION}}
        fi
    status:
      - test -x {{.GOFUMPT}}
      - test -x {{.GCI}}

  install-linter:
    desc: "Устанавливает golangci-lint"
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - |
        if [ ! -f {{.GOLANGCI_LINT}} ]; then
          echo "Installing golangci-lint..."
          GOBIN={{.BIN_DIR}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}}
        fi
    status:
      - test -x {{.GOLANGCI_LINT}}

  install-proto-tools:
    desc: "Устанавливает buf и protoc плагины"
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - |
        if [ ! -f {{.BUF}} ]; then
          echo "Installing buf..."
          GOBIN={{.BIN_DIR}} go install github.com/bufbuild/buf/cmd/buf@v{{.BUF_VERSION}}
        fi
      - |
        if [ ! -f {{.PROTOC_GEN_GO}} ]; then
          echo "Installing protoc-gen-go..."
          GOBIN={{.BIN_DIR}} go install google.golang.org/protobuf/cmd/protoc-gen-go@{{.PROTOC_GEN_GO_VERSION}}
        fi
      - |
        if [ ! -f {{.PROTOC_GEN_GO_GRPC}} ]; then
          echo "Installing protoc-gen-go-grpc..."
          GOBIN={{.BIN_DIR}} go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{.PROTOC_GEN_GO_GRPC_VERSION}}
        fi
      - |
        if [ ! -f {{.PROTOC_GEN_VALIDATE}} ]; then
          echo "Installing protoc-gen-validate..."
          GOBIN={{.BIN_DIR}} go install github.com/envoyproxy/protoc-gen-validate@{{.PROTOC_GEN_VALIDATE_VERSION}}
        fi
    status:
      - test -x {{.BUF}}
      - test -x {{.PROTOC_GEN_GO}}
      - test -x {{.PROTOC_GEN_GO_GRPC}}
      - test -x {{.PROTOC_GEN_VALIDATE}}

  install-mockery:
    desc: "Устанавливает mockery"
    cmds:
      - |
        if [ ! -f {{.MOCKERY}} ]; then
          echo "Installing mockery..."
          GOBIN={{.BIN_DIR}} go install github.com/vektra/mockery/v2@{{.MOCKERY_VERSION}}
        fi
    status:
      - test -x {{.MOCKERY}}

  # Основные команды разработки
  format:
    desc: "Форматирует весь проект"
    deps: [install-formatters]
    cmds:
      - echo "🧼 Formatting Go files..."
      - find . -type f -name '*.go' ! -path '*/vendor/*' ! -path '*/bin/*' -exec {{.GOFUMPT}} -w {} +
      - find . -type f -name '*.go' ! -path '*/vendor/*' ! -path '*/bin/*' -exec {{.GCI}} write -s standard -s default -s "prefix({{.PROJECT_PREFIX}})" {} +

  lint:
    desc: "Проверяет код линтерами"
    deps: [install-linter]
    cmds:
      - echo "🔍 Running linters..."
      - "{{.GOLANGCI_LINT}} run ./..."

  mockgen:
    desc: "Генерирует моки интерфейсов через mockery"
    deps: [install-mockery]
    cmds:
        - echo '🧪 Генерация моков...'
        - "{{.MOCKERY}}"

  # Proto команды
  proto:generate:
    desc: "Генерирует Go код из proto файлов"
    deps: [install-proto-tools]
    cmds:
      - task: proto:update-deps
      - task: proto:lint
      - task: proto:gen
      - echo "✅ Proto generation completed!"

  proto:update-deps:
    desc: "Обновляет зависимости protobuf"
    deps: [install-proto-tools]
    dir: proto
    cmds:
      - echo "Updating proto dependencies..."
      - "{{.BUF}} dep update"

  proto:lint:
    desc: "Проверяет .proto файлы"
    deps: [install-proto-tools]
    dir: proto
    cmds:
      - echo "Linting proto files..."
      - "{{.BUF}} lint"

  proto:gen:
    desc: "Генерирует Go код из .proto"
    deps: [install-proto-tools]
    dir: proto
    cmds:
      - echo "Generating Go code..."
      - "{{.BUF}} generate"

  # Команды тестирования
  test:
    desc: "Запускает тесты, генерирует отчёт покрытия и открывает его в браузере"
    cmds:
      - task: test-coverage
      - task: coverage:html

  test-coverage:
    desc: "Запускает тесты с покрытием бизнес-логики"
    cmds:
      - echo "🧪 Running tests with coverage..."
      - rm -rf {{.COVERAGE_DIR}}
      - mkdir -p {{.COVERAGE_DIR}}
      - |
        TARGET_PACKAGES=$(go list ./internal/... | grep -v "/mocks" | grep -E '/(apis|clients|services|repositories)(/|$)' | tr '\n' ',')
        if [ -z "$TARGET_PACKAGES" ]; then
          echo "⚠️ No packages found for testing"
          exit 1
        fi
        go test -v -coverprofile={{.COVERAGE_DIR}}/coverage.out -coverpkg=$TARGET_PACKAGES ./...
        go tool cover -func={{.COVERAGE_DIR}}/coverage.out | tail -n1

  coverage:html:
    desc: "Генерирует HTML-отчёт покрытия и открывает его в браузере"
    cmds:
      - echo "🌐 Generating HTML coverage report..."
      - |
        OUTPUT={{.COVERAGE_DIR}}/coverage.html
        go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o $OUTPUT
        if command -v open &> /dev/null; then
          open $OUTPUT
        elif command -v xdg-open &> /dev/null; then
          xdg-open $OUTPUT
        fi
