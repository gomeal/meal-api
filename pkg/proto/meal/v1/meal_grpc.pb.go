// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meal/v1/meal.proto

package meal_v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MealsService_SearchMeals_FullMethodName          = "/meal.v1.MealsService/SearchMeals"
	MealsService_AddToFavorites_FullMethodName       = "/meal.v1.MealsService/AddToFavorites"
	MealsService_GetFavorites_FullMethodName         = "/meal.v1.MealsService/GetFavorites"
	MealsService_GenerateShoppingList_FullMethodName = "/meal.v1.MealsService/GenerateShoppingList"
)

// MealsServiceClient is the client API for MealsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис управления блюдами и рецептами
// Предоставляет функциональность для поиска блюд, управления избранными рецептами
// и генерации списков покупок на основе выбранных блюд
type MealsServiceClient interface {
	// Поиск блюд по различным фильтрам
	SearchMeals(ctx context.Context, in *SearchMealsRequest, opts ...grpc.CallOption) (*SearchMealsResponse, error)
	// Добавить блюдо в избранное пользователя
	AddToFavorites(ctx context.Context, in *AddToFavoritesRequest, opts ...grpc.CallOption) (*AddToFavoritesResponse, error)
	// Получить список избранных блюд пользователя
	GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
	// Сгенерировать список покупок на основе выбранных блюд
	GenerateShoppingList(ctx context.Context, in *GenerateShoppingListRequest, opts ...grpc.CallOption) (*GenerateShoppingListResponse, error)
}

type mealsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMealsServiceClient(cc grpc.ClientConnInterface) MealsServiceClient {
	return &mealsServiceClient{cc}
}

func (c *mealsServiceClient) SearchMeals(ctx context.Context, in *SearchMealsRequest, opts ...grpc.CallOption) (*SearchMealsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMealsResponse)
	err := c.cc.Invoke(ctx, MealsService_SearchMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) AddToFavorites(ctx context.Context, in *AddToFavoritesRequest, opts ...grpc.CallOption) (*AddToFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToFavoritesResponse)
	err := c.cc.Invoke(ctx, MealsService_AddToFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, MealsService_GetFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) GenerateShoppingList(ctx context.Context, in *GenerateShoppingListRequest, opts ...grpc.CallOption) (*GenerateShoppingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateShoppingListResponse)
	err := c.cc.Invoke(ctx, MealsService_GenerateShoppingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealsServiceServer is the server API for MealsService service.
// All implementations must embed UnimplementedMealsServiceServer
// for forward compatibility.
//
// Сервис управления блюдами и рецептами
// Предоставляет функциональность для поиска блюд, управления избранными рецептами
// и генерации списков покупок на основе выбранных блюд
type MealsServiceServer interface {
	// Поиск блюд по различным фильтрам
	SearchMeals(context.Context, *SearchMealsRequest) (*SearchMealsResponse, error)
	// Добавить блюдо в избранное пользователя
	AddToFavorites(context.Context, *AddToFavoritesRequest) (*AddToFavoritesResponse, error)
	// Получить список избранных блюд пользователя
	GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error)
	// Сгенерировать список покупок на основе выбранных блюд
	GenerateShoppingList(context.Context, *GenerateShoppingListRequest) (*GenerateShoppingListResponse, error)
	mustEmbedUnimplementedMealsServiceServer()
}

// UnimplementedMealsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealsServiceServer struct{}

func (UnimplementedMealsServiceServer) SearchMeals(context.Context, *SearchMealsRequest) (*SearchMealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMeals not implemented")
}

func (UnimplementedMealsServiceServer) AddToFavorites(context.Context, *AddToFavoritesRequest) (*AddToFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavorites not implemented")
}

func (UnimplementedMealsServiceServer) GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}

func (UnimplementedMealsServiceServer) GenerateShoppingList(context.Context, *GenerateShoppingListRequest) (*GenerateShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShoppingList not implemented")
}
func (UnimplementedMealsServiceServer) mustEmbedUnimplementedMealsServiceServer() {}
func (UnimplementedMealsServiceServer) testEmbeddedByValue()                      {}

// UnsafeMealsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealsServiceServer will
// result in compilation errors.
type UnsafeMealsServiceServer interface {
	mustEmbedUnimplementedMealsServiceServer()
}

func RegisterMealsServiceServer(s grpc.ServiceRegistrar, srv MealsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMealsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealsService_ServiceDesc, srv)
}

func _MealsService_SearchMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).SearchMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_SearchMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).SearchMeals(ctx, req.(*SearchMealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_AddToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).AddToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_AddToFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).AddToFavorites(ctx, req.(*AddToFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).GetFavorites(ctx, req.(*GetFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_GenerateShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).GenerateShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_GenerateShoppingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).GenerateShoppingList(ctx, req.(*GenerateShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MealsService_ServiceDesc is the grpc.ServiceDesc for MealsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meal.v1.MealsService",
	HandlerType: (*MealsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchMeals",
			Handler:    _MealsService_SearchMeals_Handler,
		},
		{
			MethodName: "AddToFavorites",
			Handler:    _MealsService_AddToFavorites_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _MealsService_GetFavorites_Handler,
		},
		{
			MethodName: "GenerateShoppingList",
			Handler:    _MealsService_GenerateShoppingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal/v1/meal.proto",
}
