// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	business "github.com/gomeal/meal-api/internal/services/model"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TheMealsDbClient is an autogenerated mock type for the TheMealsDbClient type
type TheMealsDbClient struct {
	mock.Mock
}

type TheMealsDbClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TheMealsDbClient) EXPECT() *TheMealsDbClient_Expecter {
	return &TheMealsDbClient_Expecter{mock: &_m.Mock}
}

// FetchRandomMeal provides a mock function with given fields: ctx
func (_m *TheMealsDbClient) FetchRandomMeal(ctx context.Context) (business.Meal, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchRandomMeal")
	}

	var r0 business.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (business.Meal, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) business.Meal); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(business.Meal)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheMealsDbClient_FetchRandomMeal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRandomMeal'
type TheMealsDbClient_FetchRandomMeal_Call struct {
	*mock.Call
}

// FetchRandomMeal is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TheMealsDbClient_Expecter) FetchRandomMeal(ctx interface{}) *TheMealsDbClient_FetchRandomMeal_Call {
	return &TheMealsDbClient_FetchRandomMeal_Call{Call: _e.mock.On("FetchRandomMeal", ctx)}
}

func (_c *TheMealsDbClient_FetchRandomMeal_Call) Run(run func(ctx context.Context)) *TheMealsDbClient_FetchRandomMeal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TheMealsDbClient_FetchRandomMeal_Call) Return(_a0 business.Meal, _a1 error) *TheMealsDbClient_FetchRandomMeal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheMealsDbClient_FetchRandomMeal_Call) RunAndReturn(run func(context.Context) (business.Meal, error)) *TheMealsDbClient_FetchRandomMeal_Call {
	_c.Call.Return(run)
	return _c
}

// NewTheMealsDbClient creates a new instance of TheMealsDbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTheMealsDbClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TheMealsDbClient {
	mock := &TheMealsDbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
