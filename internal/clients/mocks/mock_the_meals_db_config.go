// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// TheMealsDbConfig is an autogenerated mock type for the TheMealsDbConfig type
type TheMealsDbConfig struct {
	mock.Mock
}

type TheMealsDbConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *TheMealsDbConfig) EXPECT() *TheMealsDbConfig_Expecter {
	return &TheMealsDbConfig_Expecter{mock: &_m.Mock}
}

// Timeout provides a mock function with no fields
func (_m *TheMealsDbConfig) Timeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Timeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// TheMealsDbConfig_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type TheMealsDbConfig_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
func (_e *TheMealsDbConfig_Expecter) Timeout() *TheMealsDbConfig_Timeout_Call {
	return &TheMealsDbConfig_Timeout_Call{Call: _e.mock.On("Timeout")}
}

func (_c *TheMealsDbConfig_Timeout_Call) Run(run func()) *TheMealsDbConfig_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TheMealsDbConfig_Timeout_Call) Return(_a0 time.Duration) *TheMealsDbConfig_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TheMealsDbConfig_Timeout_Call) RunAndReturn(run func() time.Duration) *TheMealsDbConfig_Timeout_Call {
	_c.Call.Return(run)
	return _c
}

// Url provides a mock function with no fields
func (_m *TheMealsDbConfig) Url() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Url")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TheMealsDbConfig_Url_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Url'
type TheMealsDbConfig_Url_Call struct {
	*mock.Call
}

// Url is a helper method to define mock.On call
func (_e *TheMealsDbConfig_Expecter) Url() *TheMealsDbConfig_Url_Call {
	return &TheMealsDbConfig_Url_Call{Call: _e.mock.On("Url")}
}

func (_c *TheMealsDbConfig_Url_Call) Run(run func()) *TheMealsDbConfig_Url_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TheMealsDbConfig_Url_Call) Return(_a0 string) *TheMealsDbConfig_Url_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TheMealsDbConfig_Url_Call) RunAndReturn(run func() string) *TheMealsDbConfig_Url_Call {
	_c.Call.Return(run)
	return _c
}

// NewTheMealsDbConfig creates a new instance of TheMealsDbConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTheMealsDbConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *TheMealsDbConfig {
	mock := &TheMealsDbConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
