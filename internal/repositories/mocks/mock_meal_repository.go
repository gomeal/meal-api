// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	business "github.com/gomeal/meal-api/internal/services/model"

	mock "github.com/stretchr/testify/mock"
)

// MealRepository is an autogenerated mock type for the MealRepository type
type MealRepository struct {
	mock.Mock
}

type MealRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MealRepository) EXPECT() *MealRepository_Expecter {
	return &MealRepository_Expecter{mock: &_m.Mock}
}

// CreateMeals provides a mock function with given fields: ctx, meals
func (_m *MealRepository) CreateMeals(ctx context.Context, meals []business.Meal) ([]business.Meal, error) {
	ret := _m.Called(ctx, meals)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeals")
	}

	var r0 []business.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []business.Meal) ([]business.Meal, error)); ok {
		return rf(ctx, meals)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []business.Meal) []business.Meal); ok {
		r0 = rf(ctx, meals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]business.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []business.Meal) error); ok {
		r1 = rf(ctx, meals)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MealRepository_CreateMeals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMeals'
type MealRepository_CreateMeals_Call struct {
	*mock.Call
}

// CreateMeals is a helper method to define mock.On call
//   - ctx context.Context
//   - meals []business.Meal
func (_e *MealRepository_Expecter) CreateMeals(ctx interface{}, meals interface{}) *MealRepository_CreateMeals_Call {
	return &MealRepository_CreateMeals_Call{Call: _e.mock.On("CreateMeals", ctx, meals)}
}

func (_c *MealRepository_CreateMeals_Call) Run(run func(ctx context.Context, meals []business.Meal)) *MealRepository_CreateMeals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]business.Meal))
	})
	return _c
}

func (_c *MealRepository_CreateMeals_Call) Return(_a0 []business.Meal, _a1 error) *MealRepository_CreateMeals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MealRepository_CreateMeals_Call) RunAndReturn(run func(context.Context, []business.Meal) ([]business.Meal, error)) *MealRepository_CreateMeals_Call {
	_c.Call.Return(run)
	return _c
}

// NewMealRepository creates a new instance of MealRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMealRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MealRepository {
	mock := &MealRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
